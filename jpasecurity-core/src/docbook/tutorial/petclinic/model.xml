<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article id="model">
  <title>Domain Model</title>
  <para> When you click around in the application and find everything working, you will recognize that most of our
    requirements are already met by the application: </para>
  <orderedlist numeration="arabic">
    <listitem>
      <para>You are able to create owners of pets</para>
    </listitem>
    <listitem>
      <para>You are able to add and edit their pets</para>
    </listitem>
    <listitem>
      <para>You are able to add visits for the owners</para>
    </listitem>
  </orderedlist>
  <para> The only thing that is really missing from the requirements is the ability to assign visits to vets. In this
    chapter we are going to realize this. </para>
  <section>
    <title>Modifying the Database</title>
    <para> The first thing to we have to do in order to assign visits to vets, is to change the database to reflect
      this. As we use an in-memory-database (HSQLDB) that is initialized from a script file, we only have to change the
      script file. We have to stop the server first: </para>
    <programlisting>
mvn jetty:stop
    </programlisting>
    <para> We now have to edit the file <filename>initDB.txt</filename> (in
        <filename>src/main/resources/db/hsqldb/</filename>). We have to add a database column to the table
        <systemitem>visits</systemitem> referencing the table <systemitem>vets</systemitem>. We change the line </para>
    <programlisting>
     <![CDATA[
    CREATE TABLE visits(
	   id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
	   pet_id INTEGER NOT NULL,
	   visit_date DATE,
	   description VARCHAR(255)
    );
    alter table visits add constraint fk_visits_pets foreign key (pet_id) references pets(id);
    ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
     <![CDATA[
    CREATE TABLE visits(
	   id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
	   pet_id INTEGER NOT NULL,
	   vet_id INTEGER NOT NULL,
	   visit_date DATE,
	   description VARCHAR(255)
    );
    alter table visits add constraint fk_visits_pets foreign key (pet_id) references pets(id);
    alter table visits add constraint fk_visits_vets foreign key (vet_id) references vets(id);
    ]]>
    </programlisting>
    <para> Additionally we have to extend all <systemitem>INSERT</systemitem> statements into the table
        <systemitem>VISITS</systemitem> to fill the additional column. Change in the file
        <filename>populateDB.txt</filename> (in <filename>src/main/resources/db/hsqldb/</filename>)</para>
    <programlisting>
INSERT INTO VISITS VALUES(1,7,'1996-03-04','rabies shot')
INSERT INTO VISITS VALUES(2,8,'1996-03-04','rabies shot')
INSERT INTO VISITS VALUES(3,8,'1996-06-04','neutered')
INSERT INTO VISITS VALUES(4,7,'1996-09-04','spayed')
    </programlisting>
    <para> into </para>
    <programlisting>
INSERT INTO VISITS VALUES(1,7,1,'2008-03-04','rabies shot')
INSERT INTO VISITS VALUES(2,8,1,'2008-03-04','rabies shot')
INSERT INTO VISITS VALUES(3,8,2,'2008-06-04','neutered')
INSERT INTO VISITS VALUES(4,7,3,'1996-09-04','spayed')
    </programlisting>
  </section>
  <section>
    <title>Modifying the Domain Model</title>
    <para> The base-class of all our entities is <systemitem>BaseEntity</systemitem> (in
        <filename>src/main/java/org/springframework/samples/petclinic/BaseEntity.java</filename>). For proper
      object-handling we add two methods here: <systemitem>equals</systemitem> and <systemitem>hashCode</systemitem>. </para>
    <para> Add </para>
    <programlisting>
      <![CDATA[
    public int hashCode() {
        if (isNew()) {
            return System.identityHashCode(this);
        } else {
            return id;
        }
    }

    public boolean equals(Object object) {
        if (!(object instanceof BaseEntity)) {
            return false;
        }
        if (isNew()) {
            return this == object;
        }
        return getId().equals(((BaseEntity)object).getId());
    }
      ]]>
    </programlisting>
    <para> Now we can modify our model to reflect the relation between visits and vets. We add the following code to the
      file <filename>Visit.java</filename> (in
      <filename>src/main/java/org/springframework/samples/petclinic/</filename>) </para>
    <programlisting>
      <![CDATA[
    /** Holds value of property pet. */
    private Vet vet;
    
    public Visit(Pet pet) {
        this();
        setPet(pet);
    }

    /** Getter for property vet.
     * @return Value of property vet.
     */
    public Vet getVet() {
        return this.vet;
    }

    /** Setter for property vet.
     * @param pet New value of property vet.
     */
    public void setVet(Vet vet) {
        this.vet = vet;
    }
      ]]>
    </programlisting>
    <para> Additionally we have to edit the file <filename>orm.xml</filename> (in
        <filename>src/main/resources/META-INF/</filename>) to configure JPA to use the extra relation. </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
    <entity class="Visit">
        <table name="VISITS"/>
        <attributes>
            <basic name="date">
                <column name="VISIT_DATE"/>
                <temporal>DATE</temporal>
            </basic>
            <many-to-one name="pet" fetch="EAGER">
                <cascade>
                    <cascade-all/>
                </cascade>
            </many-to-one>
        </attributes>
    </entity>    
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
    <entity class="Visit">
        <table name="VISITS"/>
        <attributes>
            <basic name="date">
                <column name="VISIT_DATE"/>
                <temporal>DATE</temporal>
            </basic>
            <many-to-one name="pet" fetch="EAGER">
                <cascade>
                    <cascade-all/>
                </cascade>
            </many-to-one>
            <many-to-one name="vet" fetch="EAGER">
                <cascade>
                    <cascade-all/>
                </cascade>
            </many-to-one>
        </attributes>
    </entity>    
      ]]>
      </programlisting>
    <para> Since we don't know how many visits a vet may have (that may be many), we don't want to model the relation
      between vets and visits bidirectional. Instead we add a method to the <systemitem>Clinic</systemitem> interface to
      retrieve all visits of a specified vet. So it is easy to implement filtering or lazy loading of visits later. </para>
    <para> Add the following code to the <systemitem>Clinic</systemitem> interface (in <filename>Clinic.java</filename>,
      which is in <filename>src/main/java/org/springframework/samples/petclinic/</filename>). </para>
    <programlisting>
      <![CDATA[
    /**
     * Retrieve <code>Visit</code>s from the data store,
     * returning all visits at a given vet.
     * @param vet the visited vet
     * @return a <code>Collection</code> of matching <code>Visit</code>s
     * (or an empty <code>Collection</code> if none found)
     */
    Collection<Visit> findVisits(Vet vet) throws DataAccessException;
      ]]>
    </programlisting>
    <para> We also add the implementation of this method in <filename>EntityManagerClinic.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/jpa/</filename>) </para>
    <programlisting>
      <![CDATA[
    @Transactional(readOnly = true)
    @SuppressWarnings("unchecked")
    public Collection<Visit> findVisits(Vet vet) {
        Query query = this.em.createQuery("SELECT visit FROM Visit visit "
                                        + "WHERE visit.vet = :vet");
        query.setParameter("vet", vet);
        return query.getResultList();
    }
      ]]>
    </programlisting>
  </section>
  <section>
    <title>Modifying the View</title>
    <para> The last thing we have to do is to modify the JSPs to see the relation, navigate it and add it when adding a
      visit. </para>
    <para> First we add a link to the vet in the view of the owner (in the file <filename>show.jsp</filename> in
        <filename>src/main/webapp/WEB-INF/jsp/owners/</filename>). </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
          <table>
            <tr>
            <thead>
              <th>Visit Date</th>
              <th>Description</th>
            </thead>
            </tr>
            <c:forEach var="visit" items="${pet.visits}">
              <tr>
                <td><fmt:formatDate value="${visit.date}" pattern="yyyy-MM-dd"/></td>
                <td>${visit.description}</td>
              </tr>
            </c:forEach>
          </table>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
          <table>
            <tr>
            <thead>
              <th>Vet</th>
              <th>Visit Date</th>
              <th>Description</th>
            </thead>
            </tr>
            <c:forEach var="visit" items="${pet.visits}">
              <tr>
                <td>          
                  <spring:url value="/vets/{vetId}" var="vetUrl">
                    <spring:param name="vetId" value="${visit.vet.id}"/>
                  </spring:url>
                  <a href="${fn:escapeXml(vetUrl)}">${visit.vet.firstName} ${visit.vet.lastName}</a>
                </td>
                <td><fmt:formatDate value="${visit.date}" pattern="yyyy-MM-dd"/></td>
                <td>${visit.description}</td>
              </tr>
            </c:forEach>
          </table>
      ]]>
    </programlisting>
    <para> Second we add a page to display a single vet with the list of visits. We name this file
        <filename>vet.jsp</filename> and put it into <filename>src/main/webapp/WEB-INF/jsp/vets/</filename>. This is the
      content of the file: </para>
    <programlisting>
      <![CDATA[
<%@ include file="/WEB-INF/jsp/includes.jsp" %>
<%@ include file="/WEB-INF/jsp/header.jsp" %>

<h2>Vet Information</h2>

  <table>
    <tr>
      <th>Name</th>
      <td><b>${vet.firstName} ${vet.lastName}</b></td>
    </tr>
    <tr>
      <th>Specialities</th>
      <td>
	    <c:forEach var="specialty" items="${vet.specialties}">
          ${specialty.name}
        </c:forEach>
        <c:if test="${vet.nrOfSpecialties == 0}">none</c:if>
      </td>
    </tr>
  </table>

<h2>Visits</h2>

  <c:forEach var="visit" items="${visits}">
    <table width="94%">
      <tr>
        <th>Date</th>
        <td><fmt:formatDate value="${visit.date}" pattern="yyyy-MM-dd"/></td>
      </tr>
      <tr>
        <th>Pet</th>
        <td>${visit.pet.name}</td>
      </tr>
      <tr>
        <th>Type</th>
        <td>${visit.pet.type.name}</td>
      </tr>
      <tr>
        <th>Owner</th>
        <td>
          <spring:url value="/owners/{ownerId}" var="ownerUrl">
            <spring:param name="ownerId" value="${visit.pet.owner.id}"/>
          </spring:url>
          <a href="${fn:escapeXml(ownerUrl)}">${visit.pet.owner.firstName} ${visit.pet.owner.lastName}</a>
        </td>
      </tr>
      <tr>
        <th>Description</th>
        <td>${visit.description}</td>
      </tr>
    </table>
    <table class="table-buttons">
      <tr>
        <td>
          <spring:url value="/pets/{petId}/visits/{visitId}/edit" var="visitUrl">
            <spring:param name="petId" value="${visit.pet.id}"/>
            <spring:param name="visitId" value="${visit.id}"/>
          </spring:url>
          <a href="${fn:escapeXml(visitUrl)}">Edit Visit</a>
        </td>
      </tr>
    </table>
  </c:forEach>
  
<%@ include file="/WEB-INF/jsp/footer.jsp" %>
      ]]>
    </programlisting>
    <para> To make the model available for the new vet-view, we add a method to load a vet to the
        <systemitem>Clinic</systemitem> interface. </para>
    <para> Add the following code to the <systemitem>Clinic</systemitem> interface (in <filename>Clinic.java</filename>,
      which is in <filename>src/main/java/org/springframework/samples/petclinic/</filename>). </para>
    <programlisting>
      <![CDATA[
    /**
     * Retrieve a <code>Vet</code> from the data store by id.
     * @param id the id to search for
     * @return the <code>Vet</code> if found
     * @throws org.springframework.dao.DataRetrievalFailureException if not found
     */
    Vet loadVet(int id) throws DataAccessException;
      ]]>
    </programlisting>
    <para> We also add the implementation of this method in <filename>EntityManagerClinic.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/jpa/</filename>) </para>
    <programlisting>
      <![CDATA[
    @Transactional(readOnly = true)
    public Vet loadVet(int id) {
    	return this.em.find(Vet.class, id);
    }
      ]]>
    </programlisting>
    <para> Last we have to add the following code to <filename>ClinicController.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/web/)</filename>. And don't forget to add the
        <systemitem>import</systemitem>-statement for the <systemitem>Vet</systemitem>. </para>
    <programlisting>
      <![CDATA[
    /**
     * Custom handler for displaying a vet.
     *
     * @param vetId the ID of the vet to display
     * @return a ModelMap with the model attributes for the view
     */
    @RequestMapping(value="/vets/{vetId}")
    public ModelAndView vetHandler(@PathVariable("vetId") int vetId) {
    	ModelAndView mav = new ModelAndView("vets/vet");
        Vet vet = this.clinic.loadVet(vetId);
        mav.addObject(vet);
        mav.addObject("visits", this.clinic.findVisits(vet));
        return mav;
    }
      ]]>
    </programlisting>
    <para> We also may modify <filename>vets.jsp</filename> in <filename>src/main/webapp/WEB-INF/jsp</filename> to add
      links to our newly created vet-page. </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
      <td>${vet.firstName} ${vet.lastName}</td>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
      <td>
        <spring:url value="vets/{vetId}" var="vetUrl">
          <spring:param name="vetId" value="${vet.id}"/>
        </spring:url>
        <a href="${fn:escapeXml(vetUrl)}">${vet.firstName} ${vet.lastName}</a>
      </td>
      ]]>
    </programlisting>
    <para> There is one thing more to do in order to establish the relation between visits and vets: An owner must be
      able to select a vet when making an appointment. </para>
    <para> We achieve this by adding the following lines of code to <filename>AddVisitForm.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/web/)</filename>. Again don't forget the
        <systemitem>import</systemitem>-statements. </para>
    <programlisting>
      <![CDATA[
    @ModelAttribute("vets")
    public Collection<Vet> populateVets() {
        return this.clinic.getVets();
    }
      ]]>
    </programlisting>
    <para> Now we can put a vet-selector into <filename>visitForm.jsp</filename> (in
        <filename>src/main/webapp/WEB-INF/jsp/pet/</filename>
    </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
    <tr>
      <th>
        Date:
        <br/><form:errors path="date" cssClass="errors"/>
      </th>
      <td>
        <form:input path="date" size="10" maxlength="10"/> (yyyy-mm-dd)
      </td>
    <tr/>
    <tr>
      <th valign="top">
        Description:
        <br/><form:errors path="description" cssClass="errors"/>
      </th>
      <td>
        <form:textarea path="description" rows="10" cols="25"/>
      </td>
    </tr>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
    <tr>
      <th>
        Date:
        <br/><form:errors path="date" cssClass="errors"/>
      </th>
      <td>
        <form:input path="date" size="10" maxlength="10"/> (yyyy-mm-dd)
      </td>
    <tr/>
    <tr>
      <th>
        Vet:
        <br/><form:errors path="vet" cssClass="errors"/>
      </th>
      <td>
        <form:select path="vet" items="${vets}"/>
      </td>
    </tr>
    <tr>
      <th valign="top">
        Description:
        <br/><form:errors path="description" cssClass="errors"/>
      </th>
      <td>
        <form:textarea path="description" rows="10" cols="25"/>
      </td>
    </tr>
      ]]>
    </programlisting>
    <para> Adding the vet to the list of previous visits remains as an exercise to you. </para>
    <para> In order to display a meaningful text in our vet-selector, we have to override the
        <systemitem>toString()</systemitem>-method in the class <systemitem>Vet</systemitem>. </para>
    <para> Add the following code to <filename>Person.java</filename> since it is the superclass of
        <systemitem>Vet</systemitem>. (in <filename>src/main/java/org/springframework/samples/petclinic/</filename>). </para>
    <programlisting>
      <![CDATA[
    public String toString() {
        return this.getLastName() + ", " + this.getFirstName();
    }
      ]]>
    </programlisting>
    <para> Additionally add the following code to <filename>Vet.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/</filename>). </para>
    <programlisting>
      <![CDATA[
    public String toString() {
        StringBuilder specialties = new StringBuilder();
        for (Specialty specialty: getSpecialties()) {
            specialties.append(' ').append(specialty.getName()).append(',');
        }
        if (getNrOfSpecialties() == 0) {
            specialties.append("(none)");
        } else {
            specialties.setCharAt(0, '(');
            specialties.setCharAt(specialties.length() - 1, ')');
        }
        return super.toString() + " " + specialties.toString();
    }
      ]]>
    </programlisting>
    <para> The vet is now displayed human-readable in the drop-down-box, but we have to ensure that the displayed text
      properly can be reverted to a vet. We do this by adding a vet-editor. </para>
    <para> Create the file <filename>VetEditor.java</filename> in
        <filename>src/main/java/org/springframework/samples/petclinic/web/</filename> and fill it with the following
      content. </para>
    <programlisting>
      <![CDATA[
package org.springframework.samples.petclinic.web;

import java.beans.PropertyEditorSupport;

import org.springframework.samples.petclinic.Clinic;
import org.springframework.samples.petclinic.Vet;

public class VetEditor extends PropertyEditorSupport {

	private final Clinic clinic;

	public VetEditor(Clinic clinic) {
		this.clinic = clinic;
	}

	@Override
	public void setAsText(String text) throws IllegalArgumentException {
		for (Vet vet: this.clinic.getVets()) {
			if (vet.toString().equals(text)) {
				setValue(vet);
			}
		}
	}
}
      ]]>
    </programlisting>
    <para> We register the new editor in <filename>ClinicBindingInitializer.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/web/</filename>) by adding the following line
      below of the registration of the other custom editors. </para>
    <programlisting>
      <![CDATA[
        binder.registerCustomEditor(Vet.class, new VetEditor(this.clinic));
      ]]>
    </programlisting>
    <para> Now we are able to add visits for pets and select the vet to visit. Another requirement of our application
      was that the vet is able to modify an existing visit. First we must be able to load a visit. </para>
    <para> Add the following code to the <systemitem>Clinic</systemitem> interface (in <filename>Clinic.java</filename>,
      which is in <filename>src/main/java/org/springframework/samples/petclinic/</filename>). </para>
    <programlisting>
      <![CDATA[
    /**
     * Retrieve a <code>Visit</code> from the data store by id.
     * @param id the id to search for
     * @return the <code>Visit</code> if found
     * @throws org.springframework.dao.DataRetrievalFailureException if not found
     */
    Visit loadVisit(int id) throws DataAccessException;
      ]]>
    </programlisting>
    <para> We also add the implementation of this method in <filename>EntityManagerClinic.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/jpa/</filename>) </para>
    <programlisting>
      <![CDATA[
    @Transactional(readOnly = true)
    public Visit loadVisit(int id) {
    	return this.em.find(Visit.class, id);
    }
      ]]>
    </programlisting>
    <para> Now we can create a form to edit a visit. Create
        <filename>src/main/java/org/springframework/samples/petclinic/web/EditVisitForm.java</filename> with the
      following content. </para>
    <programlisting>
      <![CDATA[
package org.springframework.samples.petclinic.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.samples.petclinic.Clinic;
import org.springframework.samples.petclinic.Visit;
import org.springframework.samples.petclinic.validation.VisitValidator;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

@Controller
@RequestMapping("/pets/*/visits/{visitId}/edit")
@SessionAttributes("visit")
public class EditVisitForm {

    private final Clinic clinic;

    @Autowired
    public EditVisitForm(Clinic clinic) {
        this.clinic = clinic;
    }

    @InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields("id");
    }

    @RequestMapping(method = RequestMethod.GET)
    public String setupForm(@PathVariable("visitId") int visitId, Model model) {
        Visit visit = this.clinic.loadVisit(visitId);
        model.addAttribute("visit", visit);
        return "pets/visitForm";
    }

    @RequestMapping(method = { RequestMethod.PUT, RequestMethod.POST })
    public String processSubmit(@ModelAttribute("visit") Visit visit, BindingResult result, SessionStatus status) {
        new VisitValidator().validate(visit, result);
        if (result.hasErrors()) {
            return "pets/visitForm";
        } else {
            this.clinic.storeVisit(visit);
            status.setComplete();
            return "redirect:/vets/" + visit.getVet().getId();
        }
    }
}
      ]]>
    </programlisting>
    <para> As view we can reuse the <filename>visitForm.jsp</filename> from
        <filename>src/main/webapp/WEB-INF/jsp/</filename>. We just have to make two modifications: </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
      <th>
        Vet:
        <br/><form:errors path="vet" cssClass="errors"/>
      </th>
      <td>
        <form:select path="vet" items="${vets}"/>
      </td>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
      <th>
        Vet:
        <br/><form:errors path="vet" cssClass="errors"/>
      </th>
      <td>
        <c:choose>
          <c:when test="${visit.new}">
            <form:select path="vet" items="${vets}"/>
          </c:when>
          <c:otherwise>
            ${visit.vet.firstName} ${visit.vet.lastName}
          </c:otherwise>
        </c:choose>
      </td>
      ]]>
    </programlisting>
    <para> Second we change the label of the button. Change </para>
    <programlisting>
      <![CDATA[
      <td colspan="2">
        <input type="hidden" name="petId" value="${visit.pet.id}"/>
        <p class="submit"><input type="submit" value="Add Visit"/></p>
      </td>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
      <td colspan="2">
        <c:choose>
          <c:when test="${visit.new}">
            <input type="hidden" name="petId" value="${visit.pet.id}"/>
            <p class="submit"><input type="submit" value="Add Visit"/></p>
          </c:when>
          <c:otherwise>
            <p class="submit"><input type="submit" value="Update Visit"/></p>
          </c:otherwise>
        </c:choose>
      </td>
      ]]>
    </programlisting>
    <para> As we already added a button to edit a visit to <filename>vet.jsp</filename>, we do not need any more to do
      to integrate the visit-editor. We can start our server again and see, if our new relation between visits and vets
      works. (Navigate to <ulink url="http://localhost:8080/jpasecurity-spring-petclinic-sample/owner.do?ownerId=6">Jean
        Coleman</ulink> as there are already added some visits.) </para>
  </section>
</article>
