<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article id="configuration">
  <title>Configuration</title>
  <para> Our application uses JPA as data-access-layer. So delete the following lines in <filename>src/main/resources/spring/business-config.xml</filename>:
  </para>
  <programlisting>
    <![CDATA[
<beans profile="jdbc">
    <!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    <context:component-scan base-package="org.springframework.samples.petclinic.repository.jdbc"/>
</beans>

[...]

<beans profile="spring-data-jpa">
    <jpa:repositories base-package="org.springframework.samples.petclinic.repository.springdatajpa"/>
</beans>
    ]]>
  </programlisting>
  <para>and change</para>
  <programlisting>
    <![CDATA[
<beans profile="default,spring-data-jpa">
    <!-- JPA EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
        </property>
        <!-- gDickens: BOTH Persistence Unit and Packages to Scan are NOT compatible, persistenceUnit will win -->
        <property name="persistenceUnitName" value="petclinic"/>
        <property name="packagesToScan" value="org.springframework.samples.petclinic"/>
    </bean>
    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>
    <!--
        Post-processor to perform exception translation on @Repository classes (from native
        exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
</beans>
    ]]>
  </programlisting>
<para>into</para>
  <programlisting>
    <![CDATA[
<beans profile="default">
    <!-- JPA EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:dataSource-ref="dataSource">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                  p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
        </property>
        <!-- gDickens: BOTH Persistence Unit and Packages to Scan are NOT compatible, persistenceUnit will win -->
        <property name="persistenceUnitName" value="petclinic"/>
        <property name="packagesToScan" value="org.springframework.samples.petclinic"/>
    </bean>
    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>
    <!--
        Post-processor to perform exception translation on @Repository classes (from native
        exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
</beans>
    ]]>
  </programlisting>
  <para> We now have to delete the packages
    <systemitem>org.springframework.samples.petclinic.repository.jdbc</systemitem> and
    <systemitem>org.springframework.samples.petclinic.repository.springdatajpa</systemitem>
    in <systemitem>src/main/java/</systemitem>.</para>
  <para>If we have done all this configuration we should be able to start an embedded tomcat 7-server with maven running the petclinic-application: </para>
  <programlisting>
    mvn tomcat7:run
  </programlisting>    
  <para> If everything works all right, jetty started successfully and you can visit the spring-petclinic
    sample-application <ulink url="http://localhost:9966/petclinic/">here</ulink>. </para>
</article>
