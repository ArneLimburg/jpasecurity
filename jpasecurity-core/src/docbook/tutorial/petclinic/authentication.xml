<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article id="authentication">
  <title>Authentication</title>
  <para> Our application now has all the features it needs. The only thing missing is some kind of user management.
    Every owner should be able to add and edit his/her pets and add visits, but should not be able to do this with the
    pets of other owners. So we have to know, which owner is currently using the system. We need some kind of
    authentication. </para>
  <para>In this chapter we will add a simple login to our application</para>
  <section>
    <title>Adding authentication data to the database</title>
    <para> First we need to handle some kind of login information. For this we create a database table
        <systemitem>USERS</systemitem> to store it. This table needs a reference to the corresponding owner or vet.
      Unfortunately we currently have no common table for owners and vets. Owners and vets already have some data in
      common, so it seems naturally to create a common base-table. We name it <systemitem>PERSONS</systemitem> and we
      put the <systemitem>FIRST_NAME</systemitem> and <systemitem>LAST_NAME</systemitem> into it. The
        <systemitem>USERS</systemitem> table then can reference the table <systemitem>PERSONS</systemitem>. </para>
    <para> Again we change the database schema in the file <filename>initDB.txt</filename> (in
        <filename>src/main/resources/db/hsqldb/</filename>). Change the following lines </para>
    <programlisting>
CREATE TABLE vets (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
	first_name VARCHAR(30),
	last_name VARCHAR(30)
);
CREATE INDEX vets_last_name ON vets(last_name);
[...]
CREATE TABLE owners (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
  first_name VARCHAR(30),
	last_name VARCHAR(30)
	address VARCHAR(255),
	city VARCHAR(80),
	telephone VARCHAR(20)
);
CREATE INDEX owners_last_name ON owners(last_name);
    </programlisting>
    <para> into </para>
    <programlisting>
CREATE TABLE persons(
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
	first_name VARCHAR(30),
	last_name VARCHAR(30)
);
CREATE INDEX persons_last_name ON persons(last_name);

CREATE TABLE users(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,
    username VARCHAR(30),
    password VARCHAR(30),
    person_id INTEGER NOT NULL
);
alter table users add constraint fk_users_persons foreign key (person_id) references persons(id);
CREATE INDEX users_username ON users(username);

CREATE TABLE vets (
	id INTEGER NOT NULL PRIMARY KEY
);
alter table vets add constraint fk_vets_persons foreign key (id) references persons(id);
[...]
CREATE TABLE owners (
	id INTEGER NOT NULL PRIMARY KEY,
	address VARCHAR(255),
	city VARCHAR(80),
	telephone VARCHAR(20)
);
alter table owners add constraint fk_owners_persons foreign key(id) references persons(id);
    </programlisting>
    <para> Additionally we have to change the data to insert in the file <filename>populateDB.txt</filename> (in
        <filename>src/main/resources/db/hsqldb/</filename>). First we add the inserts for the table
        <systemitem>PERSONS</systemitem>. </para>
    <programlisting>
INSERT INTO PERSONS VALUES(1,'James','Carter')
INSERT INTO PERSONS VALUES(2,'Helen','Leary')
INSERT INTO PERSONS VALUES(3,'Linda','Douglas')
INSERT INTO PERSONS VALUES(4,'Rafael','Ortega')
INSERT INTO PERSONS VALUES(5,'Henry','Stevens')
INSERT INTO PERSONS VALUES(6,'Sharon','Jenkins')
INSERT INTO PERSONS VALUES(7,'George','Franklin')
INSERT INTO PERSONS VALUES(8,'Betty','Davis')
INSERT INTO PERSONS VALUES(9,'Eduardo','Rodriquez')
INSERT INTO PERSONS VALUES(10,'Harold','Davis')
INSERT INTO PERSONS VALUES(11,'Peter','McTavish')
INSERT INTO PERSONS VALUES(12,'Jean','Coleman')
INSERT INTO PERSONS VALUES(13,'Jeff','Black')
INSERT INTO PERSONS VALUES(14,'Maria','Escobito')
INSERT INTO PERSONS VALUES(15,'David','Schroeder')
INSERT INTO PERSONS VALUES(16,'Carlos','Estaban')
    </programlisting>
    <para> Second we remove the names from the inserts into the table <systemitem>VETS</systemitem>. </para>
    <para> Change </para>
    <programlisting>
INSERT INTO VETS VALUES(1,'James','Carter')
INSERT INTO VETS VALUES(2,'Helen','Leary')
INSERT INTO VETS VALUES(3,'Linda','Douglas')
INSERT INTO VETS VALUES(4,'Rafael','Ortega')
INSERT INTO VETS VALUES(5,'Henry','Stevens')
INSERT INTO VETS VALUES(6,'Sharon','Jenkins')
    </programlisting>
    <para> into </para>
    <programlisting>
INSERT INTO VETS VALUES(1)
INSERT INTO VETS VALUES(2)
INSERT INTO VETS VALUES(3)
INSERT INTO VETS VALUES(4)
INSERT INTO VETS VALUES(5)
INSERT INTO VETS VALUES(6)
    </programlisting>
    <para> Third we remove the names from the inserts into the table <systemitem>OWNERS</systemitem> and fix the
      indices. </para>
    <para> Change </para>
    <programlisting>
INSERT INTO OWNERS VALUES(1,'George','Franklin','110 W. Liberty St.','Madison','6085551023')
INSERT INTO OWNERS VALUES(2,'Betty','Davis','638 Cardinal Ave.','Sun Prairie','6085551749')
INSERT INTO OWNERS VALUES(3,'Eduardo','Rodriquez','2693 Commerce St.','McFarland','6085558763')
INSERT INTO OWNERS VALUES(4,'Harold','Davis','563 Friendly St.','Windsor','6085553198')
INSERT INTO OWNERS VALUES(5,'Peter','McTavish','2387 S. Fair Way','Madison','6085552765')
INSERT INTO OWNERS VALUES(6,'Jean','Coleman','105 N. Lake St.','Monona','6085552654')
INSERT INTO OWNERS VALUES(7,'Jeff','Black','1450 Oak Blvd.','Monona','6085555387')
INSERT INTO OWNERS VALUES(8,'Maria','Escobito','345 Maple St.','Madison','6085557683')
INSERT INTO OWNERS VALUES(9,'David','Schroeder','2749 Blackhawk Trail','Madison','6085559435')
INSERT INTO OWNERS VALUES(10,'Carlos','Estaban','2335 Independence La.','Waunakee','6085555487')
    </programlisting>
    <para> into </para>
    <programlisting>
INSERT INTO OWNERS VALUES(7,'110 W. Liberty St.','Madison','6085551023')
INSERT INTO OWNERS VALUES(8,'638 Cardinal Ave.','Sun Prairie','6085551749')
INSERT INTO OWNERS VALUES(9,'2693 Commerce St.','McFarland','6085558763')
INSERT INTO OWNERS VALUES(10,'563 Friendly St.','Windsor','6085553198')
INSERT INTO OWNERS VALUES(11,'2387 S. Fair Way','Madison','6085552765')
INSERT INTO OWNERS VALUES(12,'105 N. Lake St.','Monona','6085552654')
INSERT INTO OWNERS VALUES(13,'1450 Oak Blvd.','Monona','6085555387')
INSERT INTO OWNERS VALUES(14,'345 Maple St.','Madison','6085557683')
INSERT INTO OWNERS VALUES(15,'2749 Blackhawk Trail','Madison','6085559435')
INSERT INTO OWNERS VALUES(16,'2335 Independence La.','Waunakee','6085555487')
    </programlisting>
    <para> Now we fix the owner-indices of the pets. </para>
    <para> Change </para>
    <programlisting>
INSERT INTO PETS VALUES(1,'Leo','2000-09-07',1,1)
INSERT INTO PETS VALUES(2,'Basil','2002-08-06',6,2)
INSERT INTO PETS VALUES(3,'Rosy','2001-04-17',2,3)
INSERT INTO PETS VALUES(4,'Jewel','2000-03-07',2,3)
INSERT INTO PETS VALUES(5,'Iggy','2000-11-30',3,4)
INSERT INTO PETS VALUES(6,'George','2000-01-20',4,5)
INSERT INTO PETS VALUES(7,'Samantha','1995-09-04',1,6)
INSERT INTO PETS VALUES(8,'Max','1995-09-04',1,6)
INSERT INTO PETS VALUES(9,'Lucky','1999-08-06',5,7)
INSERT INTO PETS VALUES(10,'Mulligan','1997-02-24',2,8)
INSERT INTO PETS VALUES(11,'Freddy','2000-03-09',5,9)
INSERT INTO PETS VALUES(12,'Lucky','2000-06-24',2,10)
INSERT INTO PETS VALUES(13,'Sly','2002-06-08',1,10)
    </programlisting>
    <para> into </para>
    <programlisting>
INSERT INTO PETS VALUES(1,'Leo','2000-09-07',1,7)
INSERT INTO PETS VALUES(2,'Basil','2002-08-06',6,8)
INSERT INTO PETS VALUES(3,'Rosy','2001-04-17',2,9)
INSERT INTO PETS VALUES(4,'Jewel','2000-03-07',2,9)
INSERT INTO PETS VALUES(5,'Iggy','2000-11-30',3,10)
INSERT INTO PETS VALUES(6,'George','2000-01-20',4,11)
INSERT INTO PETS VALUES(7,'Samantha','1995-09-04',1,12)
INSERT INTO PETS VALUES(8,'Max','1995-09-04',1,12)
INSERT INTO PETS VALUES(9,'Lucky','1999-08-06',5,13)
INSERT INTO PETS VALUES(10,'Mulligan','1997-02-24',2,14)
INSERT INTO PETS VALUES(11,'Freddy','2000-03-09',5,15)
INSERT INTO PETS VALUES(12,'Lucky','2000-06-24',2,16)
INSERT INTO PETS VALUES(13,'Sly','2002-06-08',1,16)
    </programlisting>
    <para> Last we have to insert the credentials to log in the users. </para>
    <para> Add </para>
    <programlisting>
INSERT INTO USERS VALUES(1,'james','b4cc344d25a2efe540adbf2678e2304c',1)
INSERT INTO USERS VALUES(2,'helen','7a2eb41a38a8f4e39c1586649da21e5f',2)
INSERT INTO USERS VALUES(3,'linda','eaf450085c15c3b880c66d0b78f2c041',3)
INSERT INTO USERS VALUES(4,'rafael','9135d8523ad3da99d8a4eb83afac13d1',4)
INSERT INTO USERS VALUES(5,'henry','027e4180beedb29744413a7ea6b84a42',5)
INSERT INTO USERS VALUES(6,'sharon','215a6517848319b70f3f450da480d888',6)
INSERT INTO USERS VALUES(7,'george','9b306ab04ef5e25f9fb89c998a6aedab',7)
INSERT INTO USERS VALUES(8,'betty','82b054bd83ffad9b6cf8bdb98ce3cc2f',8)
INSERT INTO USERS VALUES(9,'rod','52c59993d8e149a1d70b65cb08abf692',9)
INSERT INTO USERS VALUES(10,'harold','c57f431343f100b441e268cc12babc34',10)
INSERT INTO USERS VALUES(11,'peter','51dc30ddc473d43a6011e9ebba6ca770',11)
INSERT INTO USERS VALUES(12,'jean','b71985397688d6f1820685dde534981b',12)
INSERT INTO USERS VALUES(13,'jeff','166ee015c0e0934a8781e0c86a197c6e',13)
INSERT INTO USERS VALUES(14,'maria','263bce650e68ab4e23f28263760b9fa5',14)
INSERT INTO USERS VALUES(15,'david','172522ec1028ab781d9dfd17eaca4427',15)
INSERT INTO USERS VALUES(16,'carlos','dc599a9972fde3045dab59dbd1ae170b',16)
    </programlisting>
    <para> The encoded passwords are the same as the appropriate user name. They may be changed later. </para>
  </section>
  <section>
    <title>Adding the Authentication Model</title>
    <para> Now we add <filename>Credential.java</filename> in
        <filename>src/main/java/org/springframework/samples/petclinic/</filename> with the following content. We
      implement the <systemitem>org.springframework.security.userdetails.UserDetails</systemitem> interface as later we
      will use Spring-Security for login. </para>
    <programlisting>
      <![CDATA[
package org.springframework.samples.petclinic;

import java.util.Collections;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.GrantedAuthorityImpl;
import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.util.StringUtils;

import org.springframework.samples.petclinic.Person;
import org.springframework.samples.petclinic.BaseEntity;

public class Credential extends BaseEntity implements UserDetails {

    private static final List<GrantedAuthority> USER_AUTHORITIES
        = Collections.<GrantedAuthority>singletonList(new GrantedAuthorityImpl("ROLE_USER"));
    
    private String username;
    private String password;
    private Person user;
    
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }
    
    protected void setPassword(String password) {
        this.password = password;
    }
    
    public String getNewPassword() {
        return "new password";
    }
    
    public void setNewPassword(String password) {
        if (StringUtils.hasText(password)) {
            setPassword(new Md5PasswordEncoder().encodePassword(password, null));
        }
    }
    
    public Person getUser() {
        return user;
    }
    
    public void setUser(Person user) {
        this.user = user;
    }

    public List<GrantedAuthority> getAuthorities() {
        return USER_AUTHORITIES;
    }

    public boolean isEnabled() {
        return true;
    }

    public boolean isAccountNonExpired() {
        return true;
    }

    public boolean isAccountNonLocked() {
        return true;
    }

    public boolean isCredentialsNonExpired() {
        return true;
    }
    
    public boolean equals(Object object) {
        return object instanceof Credential? super.equals(object): false;
    }
}
      ]]>
    </programlisting>
    <para> We change <filename>Person.java</filename> in
        <filename>src/main/java/org/springframework/samples/petclinic/</filename> to link to the credentials. </para>
    <para> Add </para>
    <programlisting>
    private Credential credential;

    public Credential getCredential() {
        return credential;
    }
    
    public void setCredential(Credential credential) {
        this.credential = credential;
    }
    </programlisting>
    <para> We have added the table <systemitem>PERSONS</systemitem> and <systemitem>USERS</systemitem> and added the
      class <systemitem>Credential</systemitem>. Now we must reflect this in our O/R-Mapping. </para>
    <para> Change <filename>orm.xml</filename> (in <filename>src/main/resources/META-INF/</filename>) </para>
    <programlisting>
      <![CDATA[
	<mapped-superclass class="Person">
		<attributes>
			<basic name="firstName">
				<column name="FIRST_NAME"/>
			</basic>
			<basic name="lastName">
				<column name="LAST_NAME"/>
			</basic>
		</attributes>
	</mapped-superclass>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
	<entity class="Person">
		<table name="PERSONS"/>
		<inheritance strategy="JOINED"/>
		<attributes>
			<basic name="firstName">
				<column name="FIRST_NAME"/>
			</basic>
			<basic name="lastName">
				<column name="LAST_NAME"/>
			</basic>
			<one-to-one name="credential" target-entity="Credential" mapped-by="user" fetch="EAGER">
				<cascade>
					<cascade-all/>
				</cascade>
			</one-to-one>
		</attributes>
	</entity>

	<entity class="Credential">
		<table name="USERS"/>
		<attributes>
			<basic name="username">
				<column name="USERNAME"/>
			</basic>
			<basic name="password">
				<column name="PASSWORD"/>
			</basic>
			<one-to-one name="user" target-entity="Person" fetch="EAGER">
				<join-column name="PERSON_ID"/>
				<cascade>
					<cascade-all/>
				</cascade>
			</one-to-one>
			<transient name="newPassword"/>
			<transient name="authorities"/>
			<transient name="enabled"/>
			<transient name="accountNonExpired"/>
			<transient name="accountNonLocked"/>
			<transient name="credentialsNonExpired"/>
		</attributes>
	</entity>
      ]]>
    </programlisting>
  </section>
  <section>
    <title>Change the password</title>
    <para> Our application is now able to store usernames and passwords, but there is no possibility to input or change
      it. </para>
    <para> We modify the <filename>form.jsp</filename> (in <filename>src/main/webapp/WEB-INF/jsp/owners/</filename>) to
      achive both. We add the fields for username and password between the phone number and the buttons. </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
    <tr>
      <th>
        Telephone: <form:errors path="telephone" cssClass="errors"/>
        <br/>
        <form:input path="telephone" size="20" maxlength="20"/>
      </th>
    </tr>
    <tr>
      <td>
        <c:choose>
          <c:when test="${owner.new}">
            <p class="submit"><input type="submit" value="Add Owner"/></p>
          </c:when>
          <c:otherwise>
            <p class="submit"><input type="submit" value="Update Owner"/></p>
          </c:otherwise>
        </c:choose>
      </td>
    </tr>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
    <tr>
      <th>
        Telephone: <form:errors path="telephone" cssClass="errors"/>
        <br/>
        <form:input path="telephone" size="20" maxlength="20"/>
      </th>
    </tr>
    <tr>
      <th>
        <c:choose>
          <c:when test="${owner.new}">
            Username: <form:errors path="credential.username" cssClass="errors"/>
            <br/>
            <form:input path="credential.username" size="20" maxlength="20"/>
          </c:when>
          <c:otherwise>
            Username: ${owner.credential.username}
          </c:otherwise>
        </c:choose>
      </th>
    </tr>
    <tr>
      <th>
        Password: <form:errors path="credential.newPassword" cssClass="errors"/>
        <br/>
        <form:password path="credential.newPassword" size="20" maxlength="20"/>
      </th>
    </tr>
    <tr>
      <td>
        <c:choose>
          <c:when test="${owner.new}">
            <p class="submit"><input type="submit" value="Register User"/></p>
          </c:when>
          <c:otherwise>
            <p class="submit"><input type="submit" value="Update Owner"/></p>
          </c:otherwise>
        </c:choose>
      </td>
    </tr>
      ]]>
    </programlisting>
    <para> Now we modify <filename>AddOwnerForm.java</filename> and <filename>EditOwnerForm.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/web/</filename>) to actually store username and
      password. </para>
    <para> In <filename>AddOwnerForm.java</filename> change </para>
    <programlisting>
      <![CDATA[
    @RequestMapping(method = RequestMethod.GET)
    public String setupForm(Model model) {
        Owner owner = new Owner();
        model.addAttribute(owner);
        return "ownerForm";
    }
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
    @RequestMapping(method = RequestMethod.GET)
    public String setupForm(Model model) {
        Owner owner = new Owner();
        Credential credential = new Credential();
        owner.setCredential(credential);
        credential.setUser(owner);
        model.addAttribute(owner);
        model.addAttribute(credential); //This is for the pre-authentication filter later
        return "owners/form";
    }
      ]]>
    </programlisting>
    <para> In <filename>EditOwnerForm.java</filename> change </para>
    <programlisting>
      <![CDATA[
@Controller
@RequestMapping("/editOwner.do")
@SessionAttributes(types = Owner.class)
public class EditOwnerForm {
    ...
}
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
@Controller
@RequestMapping("/owners/new")
@SessionAttributes("Owner")
public class EditOwnerForm {
    ...
}
      ]]>
    </programlisting>
    <para> and </para>
    <programlisting>
      <![CDATA[
    @InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields("id");
    }
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
    @InitBinder
    public void setAllowedFields(WebDataBinder dataBinder) {
        dataBinder.setDisallowedFields("id","username");
    }
      ]]>
    </programlisting>
    <para> Additionally we want to check that the user did not input an empty password (especially when the user is
      created, otherwise the current password can be taken), so we have to change the
        <filename>OwnerValidator.java</filename> (in
        <filename>src/main/java/org/springframework/samples/petclinic/validation</filename>). </para>
    <para> Add the following checks to the end of the validate method. </para>
    <programlisting>
      <![CDATA[
        if (!StringUtils.hasLength(owner.getCredential().getUsername())) {
            errors.rejectValue("credential.username", "required", "required");
        }
        if (owner.getCredential().isNew() && !StringUtils.hasLength(owner.getCredential().getPassword())) {
            errors.rejectValue("credential.newPassword", "required", "required");
        }
      ]]>
    </programlisting>
  </section>
  <section>
    <title>Integrating Spring Security</title>
    <para> We now need a simple login mechanism. Since we want to use Spring-Security, we create a credential-service
      that implements the <systemitem>org.springframework.security.userdetails.UserDetailsService</systemitem>
      interface. </para>
    <para> We create a package <systemitem>security</systemitem> (by creating the folder
        <filename>src/main/java/org/springframework/samples/petclinic/security/</filename>) and put
        <filename>CredentialService.java</filename> into it. </para>
    <para> The content of <filename>CredentialService.java</filename> follows: </para>
    <programlisting>
      <![CDATA[
package org.springframework.samples.petclinic.security;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.springframework.dao.DataAccessException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Repository
@Transactional
public class CredentialService implements UserDetailsService {

    @PersistenceContext
    private EntityManager em;
    
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {
        try {
            Query query = this.em.createQuery("SELECT credential FROM Credential credential "
                                            + "INNER JOIN FETCH credential.user "
                                            + "WHERE credential.username = :username");
            query.setParameter("username", username);
            return (UserDetails)query.getSingleResult();
        } catch (NoResultException e) {
            throw new UsernameNotFoundException(username, e);
        }
    }
}
      ]]>
    </programlisting>
    <para> We add the security configuration to the Spring application context
        (<filename>src/main/webapp/WEB-INF/spring/applicationContext-hibernate.xml</filename>). </para>
    <para> First change </para>
    <programlisting>
      <![CDATA[
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:sec="http://www.springframework.org/schema/security"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
      ]]>
    </programlisting>
    <para> Now add the following configuration at the end of <filename>applicationContext-jpa.xml</filename>. </para>
    <programlisting>
      <![CDATA[
    <sec:http pattern="/login" security="none"/>
	      <sec:http auto-config="true">
        <sec:intercept-url pattern="/owners/new" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <sec:intercept-url pattern="/**" access="ROLE_USER" />
        <sec:form-login login-page="/login" default-target-url="/"/>
        <sec:logout />
    </sec:http>

    <sec:authentication-manager>
        <sec:authentication-provider user-service-ref="userService">
          <sec:password-encoder hash="md5"/>
        </sec:authentication-provider>
    </sec:authentication-manager>

	
    <bean id="userService" class="org.springframework.samples.petclinic.security.CredentialService"/>
      ]]>
    </programlisting>
    <para> With this configuration access to our pages is allowed only for users with the role
        <systemitem>ROLE_USER</systemitem> (which are all owners and vets). Only access to our login page and to our
      page to add owners is allowed for everyone. The latter is needed to enable new users to register. </para>
    <para> Now we need a login page. We create the file <filename>login.jsp</filename> in
        <filename>src/main/webapp/</filename> with the following content. </para>
    <programlisting>
      <![CDATA[
<%@ page import="org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter" %>
<%@ page import="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter" %>
<%@ page import="org.springframework.security.core.AuthenticationException" %>
<%@ include file="/WEB-INF/jsp/includes.jsp" %>
<%@ include file="/WEB-INF/jsp/header.jsp" %>

    <form name="f" action="<c:url value='j_spring_security_check'/>" method="POST">
      <table>
        <tr><td>User:</td><td><input type='text' name='j_username' value='<c:if test="${not empty param.login_error}"><c:out value="${SPRING_SECURITY_LAST_USERNAME}"/></c:if>'/></td></tr>
        <tr><td>Password:</td><td><input type='password' name='j_password'></td></tr>
        <tr><td><input type="checkbox" name="_spring_security_remember_me"></td><td>Don't ask for my password for two weeks</td></tr>

        <tr><td colspan='2'><p class="submit"><input name="submit" type="submit"></p></td></tr>
        <tr><td colspan='2'><p class="submit"><input name="reset" type="reset"></p></td></tr>
      </table>

    </form>

  <table class="footer">
    <tr>
      <td><a href="<c:url value="/owners/new"/>">Register</a></td>
    </tr>
  </table>

  </div>
</body>

</html>
      ]]>
    </programlisting>
    <para> With this changes we now are able to log in any user. We now also can improve the creation of users: We are
      now able to check whether a username does already exist and we can automatically log in a newly created user. We
      have to inject the <systemitem>UserDetailsService</systemitem> we just created into the
        <systemitem>AddOwnerForm</systemitem> (in
        <filename>src/main/java/org/springframework/samples/petclinic/web/AddOwnerForm.java</filename>) </para>
    <para> First we add an attribute <systemitem>UserDetailsService</systemitem> and inject it via the constructor.
      Change </para>
    <programlisting>
      <![CDATA[
    @Autowired
    public AddOwnerForm(Clinic clinic) {
        this.clinic = clinic;
    }
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
    private final UserDetailsService userDetailsService;

    @Autowired
    public AddOwnerForm(Clinic clinic,
                        UserDetailsService userDetailsService) {
        this.clinic = clinic;
        this.userDetailsService = userDetailsService;
    }
      ]]>
    </programlisting>
    <para> Now we can check, whether the username does already exist. In <systemitem>processSubmit</systemitem> after </para>
    <programlisting>
      <![CDATA[
        new OwnerValidator().validate(owner, result);
      ]]>
    </programlisting>
    <para> add </para>
    <programlisting>
      <![CDATA[
        try {
            userDetailsService.loadUserByUsername(owner.getCredential().getUsername());
            result.rejectValue("credential.username", "alreadyExists", "already exists");
        } catch (UsernameNotFoundException e) {
            //all right, the user does not already exist
        }
      ]]>
    </programlisting>
    <para> To automatically log in the new user, modify the <systemitem>else</systemitem> block in
        <systemitem>processSubmit</systemitem>. </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
        else {
            this.clinic.storeOwner(owner);
            status.setComplete();
            return "redirect:/owners/"+ owner.getId();
        }
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
        else {
            this.clinic.storeOwner(owner);
            Credential credential = owner.getCredential();
            Authentication authentication
              = new UsernamePasswordAuthenticationToken(credential, credential, credential.getAuthorities());
            SecurityContextHolder.getContext().setAuthentication(authentication);
            status.setComplete();
            return "redirect:/welcome";
        }
      ]]>
    </programlisting>
    <para> Don't forget to add the required imports. </para>
    <para> When we are logged in we would expect a personal greeting and a direct link to our pets. </para>
    <para> For this we add the required data to the model in <filename>ClinicController.java</filename> in
        (<filename>src/main/java/org/springframework/samples/petclinic/web/</filename>). </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
      @RequestMapping("/")
      public String welcomeHandler() {
          return "welcome";
      }
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
     <![CDATA[
      @RequestMapping("/login")
      public String loginHandler() {
          return "login";
      }

     /**
      * Custom handler for the welcome view.
      * <p>
      * Note that this handler relies on the RequestToViewNameTranslator to
      * determine the logical view name based on the request URL: "/welcome.do"
      * -&gt; "welcome".
      */
      @RequestMapping("/")
      public ModelAndView welcomeHandler() {
          Credential credential = (Credential)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
          ModelAndView mav = new ModelAndView("welcome");
          mav.addObject("person", credential.getUser());
          mav.addObject("vet", credential.getUser() instanceof Vet);
          mav.addObject("owner", credential.getUser() instanceof Owner);
          return mav;
      }
      ]]>
    </programlisting>
    <para> And we add the data to <filename>welcome.jsp</filename> (from
        <filename>src/main/webapp/WEB-INF/jsp/</filename>). </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
<h2><fmt:message key="welcome"/></h2>

<ul>
  <li><a href="<c:url value="/findOwners.do"/>">Find owner</a></li>
  <li><a href="<c:url value="/vets.do"/>">Display all veterinarians</a></li>
  <li><a href="<c:url value="/html/petclinic.html"/>">Tutorial</a></li>
  <li><a href="<c:url value="/docs/index.html"/>">Documentation</a></li>
</ul>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
<h2><fmt:message key="welcome"/> ${person.firstName} ${person.lastName}</h2>

<ul>
  <c:choose>
    <c:when test="${vet}">
      <li>
          <spring:url value="vets/{vetId}" var="vetsUrl">
              <spring:param name="vetId" value="${person.id}"/>
          </spring:url>
          <a href="${fn:escapeXml(vetsUrl)}">Personal information</a>
      </li>
      <li><a href="<spring:url value="/owners/search" htmlEscape="true" />">Find owner</a></li>
    </c:when>
    <c:when test="${owner}">
      <p>&nbsp;</p>
      <li>          
      	  <spring:url value="owners/{ownerId}" var="ownerUrl">
              <spring:param name="ownerId" value="${person.id}"/>
          </spring:url>
          <a href="${fn:escapeXml(ownerUrl)}">Personal information </a>
      </li>
    </c:when>
  </c:choose>
  <li><a href="<spring:url value="/vets" htmlEscape="true" />">All veterinarians</a></li>
</ul>
      ]]>
    </programlisting>
    <para> You also may add a logout-link to every page by modifying <filename>footer.jsp</filename> (from
        <filename>src/main/webapp/WEB-INF/jsp/</filename>). </para>
    <para> Change </para>
    <programlisting>
      <![CDATA[
      <td align="right"><img src="<c:url value="/images/springsource-logo.png"/>"/></td>
      ]]>
    </programlisting>
    <para> into </para>
    <programlisting>
      <![CDATA[
      <td align="right"><a href='<spring:url value="j_spring_security_logout"/>'>Logout</a></td>
      ]]>
    </programlisting>
    <para> The last thing we have to do is to add the Spring-Security filter to our <filename>web.xml</filename> (in
        <filename>src/main/webapp/WEB-INF/</filename>). </para>
    <para> Add </para>
    <programlisting>
      <![CDATA[
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
      ]]>
    </programlisting>
    <para> When you now start the application you have to login to access the pages. Remember the login data we have put
      into the database (the password was the same as the username) or use the <ulink
        url="http://localhost:8080/jpasecurity-spring-petclinic-sample/addOwner.do">Register</ulink> link from the
      login-page to register a new owner. </para>
  </section>
</article>
