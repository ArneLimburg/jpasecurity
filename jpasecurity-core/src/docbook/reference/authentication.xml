<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article>
  <title>Authentication</title>
  <para>
    Authentication is the process of determining and verifying
    the identity of someone or something. In multi-user applications,
    the process of authentication for an application is needed to get
    knowledge about the person that is currently using the application.
    The widely used process for authentication is a login process during
    which the user is asked for his username and password.
    A user that knows one of this username/password-tuples is assumend
    to be the person belonging to that username. Besides
    username/password authentication there are other methods like
    public-key-authentication with a digital certificate, to name just one.
  </para>
  <section>
    <title>Authentication in JPA Security</title>
    <para>
      JPA Security uses an implementation of the
      <systemitem>net.sf.jpasecurity.configuration.SecurityContext</systemitem>
      interface to be aware of the currently authenticated user
      and other related information (like its roles, tenant, ...) at runtime.
    </para>
    <section>
      <title>Default-Configuration for Authentication</title>
      <para>
        By default JPA Security will try to auto-detect your security context.
        This is done via the indirection of an authentication provider. An authentication
        provider provides access to the current authenticated user and its roles.
        The detection follows the following rules (The first matching rule is taken): 
      </para>
      <orderedlist>
        <listitem>
          <para>
            When spring-security is in the classpath, the <systemitem>SpringAuthenticationProvider</systemitem> is used.
          </para>
        </listitem>
        <listitem>
          <para>
            When <systemitem>java:comp/EJBContext</systemitem> is available in the JNDI-context,
            the <systemitem>EjbAuthenticationProvider</systemitem> is used.
          </para>
        </listitem>
        <listitem>
          <para>
            When JSF is available in the classpath, the <systemitem>JsfAuthenticationProvider</systemitem> is used.
          </para>
        </listitem>
        <listitem>
          <para>
            Otherwise the <systemitem>DefaultAuthenticationProvider</systemitem> is used.
          </para>
        </listitem>
      </orderedlist>
    </section>
    <section>
      <title>Customizing Authentication</title>
      <para>
        When the described auto-detection strategy does not work for your environment,
        you may specify the class name of any implementation of the
        <systemitem>net.sf.jpasecurity.configuration.SecurityContext</systemitem> interface as value
        of the persistence-property <systemitem>net.sf.jpasecurity.security.context</systemitem>
        in your <filename>persistence.xml</filename>. To provide backward compatibility to JPA Security 0.3
        <systemitem>net.sf.jpasecurity.security.authentication.provider</systemitem> is also valid,
        if you specify a class name of an implementation of the
        <systemitem>net.sf.jpasecurity.configuration.AuthenticationProvider</systemitem> interface,
        but any specification of the <systemitem>net.sf.jpasecurity.security.context</systemitem> property
        will take precedence.
      </para>
    </section>
  </section>
</article>
