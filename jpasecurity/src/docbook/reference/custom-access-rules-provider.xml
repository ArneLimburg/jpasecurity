<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article>
  <title>A custom access rules provider</title>
  <para>
    As stated before you may implement your own way of providing access rules (i.e. via JDBC).
	You have to implement the interface <systemitem>org.jpasecurity.security.rules.AccessRulesProvider</systemitem>
	and specify the property <systemitem>org.jpasecurity.security.rules.provider</systemitem>
	in your <filename>persistence.xml</filename> with the classname of your implementation of the
	interface <systemitem>org.jpasecurity.security.rules.AccessRulesProvider</systemitem>.
    Take a look at its javadoc documentation for further reference.
  </para>
  <section>
    <title>Accessing persistence properties</title>
    <para>
      Your custom access rules provider may need additional configuration parameters. You can define them
      via the persistence properties in your <filename>persistence.xml</filename>. All you have to do, is to implement
      the interface <systemitem>org.jpasecurity.persistence.PersistenceInformationReceiver</systemitem>.
      Then you will have the persistence properties injected when your persistence provider is initialized.      
    </para>
  </section>
  <section>
    <title>Implementing an Access Rules Provider</title>
    <para>
      When you take a look at the methods of <systemitem>org.jpasecurity.rules.AccessRulesProvider</systemitem>,
      you may notice that you need to create objects of type
      <systemitem>org.jpasecurity.security.AccessRule</systemitem>. This objects may be created using a
      <systemitem>org.jpasecurity.jpql.parser.JpqlParser</systemitem> in conjunction with an
      <systemitem>org.jpasecurity.security.rules.AccessRulesCompiler</systemitem>, but you may subclass
      <systemitem>org.jpasecurity.security.rules.AbstractAccessRulesProvider</systemitem>
      to inherit this functionality. Then you have to override <systemitem>initializeAccessRules</systemitem>
      and call <systemitem>compileRules</systemitem> from within.
    </para>
  </section>
  <section>
    <title>Example</title>
    <example>
      <title>Implementing a JDBC access rules provider</title>
      <para>
        The following code shows how to implement an access rules provider that reads its access rules from a database.
        You may specify the needed parameters in your <filename>persistence.xml</filename>.
      </para>
      <programlisting>
        <![CDATA[
public class JdbcAccessRulesProvider extends AbstractAccessRulesProvider {

  public static final String ACCESS_RULES_JDBC_URL_PROPERTY = "org.jpasecurity.security.rules.jdbc.url";
  public static final String ACCESS_RULES_JDBC_USERNAME_PROPERTY = "org.jpasecurity.security.rules.jdbc.username";
  public static final String ACCESS_RULES_JDBC_PASSWORD_PROPERTY = "org.jpasecurity.security.rules.jdbc.password";  
  public static final String ACCESS_RULES_JDBC_TABLE_PROPERTY = "org.jpasecurity.security.rules.jdbc.table";
  public static final String ACCESS_RULES_JDBC_COLUMN_PROPERTY = "org.jpasecurity.security.rules.jdbc.column";

  protected void initializeAccessRules() {
    Map<String, String> properties = getPersistenceProperties();
    String url = getPersistenceProperty(ACCESS_RULES_JDBC_URL_PROPERTY);
    String username = getPersistenceProperty(ACCESS_RULES_JDBC_USERNAME_PROPERTY);
    String password = getPersistenceProperty(ACCESS_RULES_JDBC_PASSWORD_PROPERTY);
    String table = getPersistenceProperty(ACCESS_RULES_JDBC_TABLE_PROPERTY);
    String column = getPersistenceProperty(ACCESS_RULES_JDBC_COLUMN_PROPERTY);
    Connection connection = null;
    Statement statement = null;
    ResultSet resultSet = null;
    Collection<String> accessRules = new HashSet<String>();
    try {
      connection = DriverManager.getConnection(url, username, password);
      statement = connection.createStatement();
      resultSet = statement.executeQuery("SELECT " + column + " FROM " + table);
      while (resultSet.next()) {
        accessRules.add(resultSet.getString(1));
      }
      compileRules(accessRules);
    } catch (SQLException e) {
      throw new PersistenceException("Error reading access rules", e);
    } finally {
      close(resultSet);
      close(statement);
      close(connection);
    }
  }
  
  private String getPersistenceProperty(String propertyName) {
    String propertyValue = getPersistenceProperties().get(propertyName);
    if (propertyValue == null) {
      throw new PersistenceException("Error reading acces rules, property " + propertyName + " must be set");
    }
    return propertyValue;
  }
  
  private void close(ResultSet resultSet) {
    if (resultSet != null) {
      try {
        resultSet.close();
      } catch (SQLException e) {
        //ignore
      }
    }
  }

  private void close(Statement statement) {
    if (statement != null) {
      try {
        statement.close();
      } catch (SQLException e) {
        //ignore
      }
    }
  }

  private void close(Connection connection) {
    if (connection != null) {
      try {
        connection.close();
      } catch (SQLException e) {
        //ignore
      }
    }
  }
}
        ]]>          
      </programlisting>
      <para>
        In your <filename>persistence.xml</filename> you can specify the needed parameters like following.
      </para>
      <programlisting>
        <![CDATA[
<persistence ...>

  <persistence-unit name="..." ...>

    ...

    <properties>
      <property name="org.jpasecurity.security.rules.jdbc.url" value="jdbc:your.db.url" />
      <property name="org.jpasecurity.security.rules.jdbc.username" value="your_username" />
      <property name="org.jpasecurity.security.rules.jdbc.password" value="your_password" />
      <property name="org.jpasecurity.security.rules.jdbc.table" value="your_table_with_access_rules" />
      <property name="org.jpasecurity.security.rules.jdbc.column" value="your_column_containing_the_access_rules" />
    </properties>

  </persistence-unit>
</persistence>       
        ]]>          
      </programlisting>
    </example>
  </section>
</article>
