<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article id="preface">
  <title>Preface</title>
  <para>
    Developing enterprise software applications with security requirements 
    can be a cumbersome and error-prone process. In such applications often
    the security is spread all over the application code. This makes it difficult
    to understand how things work and hard to maintain security in such code.
  </para>
  <para>
    With model-driven development business logic should be expressed in the objects of your domain model.
    As for now there is no convenient way to express access control requirements through your domain model.
    Hence access control-code is normally written into the service layer or data-access layer.
  </para>
  <para>
    JPA Security offers a way to express access control through your domain model
    and additionally supplies a solution to completely separate access control logic from business logic,
    improving performance and maintainability.
    JPA Security provides an interface to define security requirements of your
    domain model via configuration (Annotations or XML).
  </para>
  <para>
	Due to it's smooth integration into current Java standards,
	it may be integrated into every layer of your application.
	<!--
	It enables you to configure rules defining access control for your Java Beans
	(like JSF 2 Managed Beans, CDI Beans, EJBs and JPA 2 Entity Beans or Embeddables)
	 -->
	It enables you to configure rules defining access control for your Entity Beans and Embeddables
    based on the current security context
    (i.e. the currently authenticated user and/or its roles in the application).
  </para>
  <para>
    JPA Security uses the notion of <emphasis>security unit</emphasis> to refer
    to a set of Java bean classes and their corresponding access rules.
    <!-- 
    A security unit
    may be completely decoupled from other concepts like this in the Java universe,
    but it may correspond i.e. to a servlet context (in a web environment)
    or to a persistence context (in a JPA environment).
     -->
    In the current version of JPA Security a security unit directly corresponds to a
    persistence unit of JPA.
    The content of a security unit is defined at deployment time and may not change at runtime.
  </para>
  <para>
    In contrast to the <emphasis>security unit</emphasis>, the <emphasis>security context</emphasis>
    starts at runtime with the authentication of a user. As of version 0.4.0 of JPA Security
    the content of this context is completely customizable and you can do so by implementing the
    <computeroutput>SecurityContext</computeroutput> interface. The security context
    contains information like i.e. the current user, its roles and/or the current tenant,
    but any kind of context information that is needed to specify the authorization of the current
    user to access beans may be made available through the security context.
  </para>
  <para>
    JPA Security smoothly integrates with existing authentication solutions like specified in the
    servlet specification, with EJB or Spring Security. JPA Security may be configured to
    take the current user and its roles provided by this technologies and fill the security context with it.
  </para>
</article>
