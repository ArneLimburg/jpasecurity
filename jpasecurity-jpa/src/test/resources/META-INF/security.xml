<security xmlns="http://jpasecurity.sf.net/xml/ns/security"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://jpasecurity.sf.net/xml/ns/security http://jpasecurity.sf.net/xml/ns/security/security_1_0.xsd"
          schemaVersion="1.0">

  <persistence-unit name="simple-contacts">
    <access-rule>GRANT READ ACCESS TO Contact contact WHERE contact.owner = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO Contact contact WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
    <access-rule>GRANT READ ACCESS TO User user WHERE user = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO User user WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
  </persistence-unit>

  <persistence-unit name="annotation-based-field-access">
    <access-rule>GRANT ACCESS TO FieldAccessAnnotationTestBean bean WHERE bean.name = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO FieldAccessAnnotationTestBean bean WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
  </persistence-unit>

  <persistence-unit name="annotation-based-method-access">
    <access-rule>GRANT ACCESS TO MethodAccessAnnotationTestBean bean WHERE bean.name = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO MethodAccessAnnotationTestBean bean WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
  </persistence-unit>

  <persistence-unit name="xml-based-field-access">
    <access-rule>GRANT ACCESS TO FieldAccessXmlTestBean bean WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
  </persistence-unit>

  <persistence-unit name="lazy-relationship">
	<access-rule>GRANT ACCESS TO TestBean bean WHERE bean.name = CURRENT_PRINCIPAL OR bean.parent.name = CURRENT_PRINCIPAL</access-rule>  
  </persistence-unit>

  <persistence-unit name="mixed-protection-level-test">
  	<access-rule>GRANT ACCESS TO ProtectedJoinedEntity bean WHERE 1=1</access-rule>
  	<access-rule>GRANT ACCESS TO ProtectedJoiningEntity bean WHERE 1=1</access-rule>
  </persistence-unit>

  <persistence-unit name="access-check">
    <access-rule>GRANT CREATE ACCESS TO FieldAccessAnnotationTestBean bean WHERE 'creator' IN (CURRENT_ROLES)</access-rule>
    <access-rule>GRANT READ ACCESS TO FieldAccessAnnotationTestBean bean WHERE bean.name = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO FieldAccessAnnotationTestBean bean WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
  </persistence-unit>

  <persistence-unit name="parent-child">
    <access-rule>GRANT ACCESS TO ParentTestBean bean WHERE bean.name = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO ParentTestBean bean WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
    <access-rule>GRANT ACCESS TO ChildTestBean bean WHERE bean.name = CURRENT_PRINCIPAL</access-rule>
    <access-rule>GRANT ACCESS TO ChildTestBean bean WHERE 'admin' IN (CURRENT_ROLES)</access-rule>
  </persistence-unit>

  <persistence-unit name="with-clause">
     <access-rule>
       GRANT ACCESS TO MethodAccessAnnotationTestBean bean
         WHERE 'admin' in (CURRENT_ROLES)
     </access-rule>
    <access-rule>
      GRANT ACCESS TO MethodAccessAnnotationTestBean b
        WHERE EXISTS (SELECT bean FROM MethodAccessAnnotationTestBean bean JOIN bean.parent parent
                      WITH parent.name = 'user2' WHERE b = bean AND bean.name = CURRENT_PRINCIPAL)
    </access-rule>
  </persistence-unit>

  <persistence-unit name="acl-model">
    <!-- master user with read access -->
    <access-rule>
      GRANT READ ACCESS TO net.sf.jpasecurity.model.acl.AccessControlled bean WHERE (-1 IN (CURRENT_ROLES))
    </access-rule>
    <!-- master user with write access -->
    <access-rule>
      GRANT ACCESS TO net.sf.jpasecurity.model.acl.AccessControlled bean WHERE (-2 IN (CURRENT_ROLES))
    </access-rule>
    <access-rule>
      GRANT ACCESS TO net.sf.jpasecurity.model.acl.AccessControlled bean
      WHERE (bean.accessControlList is null OR EXISTS (
      SELECT e FROM Acl acl JOIN acl.entries e
      WHERE acl = bean.accessControlList
      AND (
      (e.group is null AND EXISTS (SELECT user FROM User user JOIN user.roles role JOIN role.privileges privilege
      WHERE privilege = e.privilege AND user.id = CURRENT_PRINCIPAL))
      OR (e.privilege is null AND EXISTS (SELECT user2 FROM User user2 JOIN user2.groups group2 JOIN
      group2.fullHierarchy fullHierarchy2 WHERE user2.id = CURRENT_PRINCIPAL AND fullHierarchy2 = e.group))
      OR (EXISTS (SELECT user3 FROM User user3 JOIN user3.groups groups3 JOIN groups3.fullHierarchy fullHierarchy3
      WHERE user3.id = CURRENT_PRINCIPAL AND fullHierarchy3 = e.group) AND EXISTS (SELECT user FROM User user JOIN
      user.roles role JOIN role.privileges privilege WHERE privilege = e.privilege AND user.id = CURRENT_PRINCIPAL))
      )
      ))
    </access-rule>
  </persistence-unit>

  <persistence-unit name="acl-model-nocache">
    <!-- master user with read access -->
    <access-rule>
      GRANT READ ACCESS TO net.sf.jpasecurity.model.acl.AccessControlled bean WHERE (-1 IN (CURRENT_ROLES))
    </access-rule>
    <!-- master user with write access -->
    <access-rule>
      GRANT ACCESS TO net.sf.jpasecurity.model.acl.AccessControlled bean WHERE (-2 IN (CURRENT_ROLES))
    </access-rule>
    <access-rule>
      GRANT ACCESS TO net.sf.jpasecurity.model.acl.AccessControlled bean
      WHERE (bean.accessControlList is null OR EXISTS (
      SELECT /* QUERY_OPTIMIZE_NOCACHE */ e FROM Acl acl JOIN acl.entries e
      WHERE acl = bean.accessControlList
      AND (
      (e.group is null AND EXISTS (SELECT /* QUERY_OPTIMIZE_NOCACHE */ user FROM User user JOIN user.roles role JOIN role.privileges privilege
      WHERE privilege = e.privilege AND user.id = CURRENT_PRINCIPAL))
      OR (e.privilege is null AND EXISTS (SELECT /* QUERY_OPTIMIZE_NOCACHE */ user2 FROM User user2 JOIN user2.groups group2 JOIN
      group2.fullHierarchy fullHierarchy2 WHERE user2.id = CURRENT_PRINCIPAL AND fullHierarchy2 = e.group))
      OR (EXISTS (SELECT /* QUERY_OPTIMIZE_NOCACHE */ user3 FROM User user3 JOIN user3.groups groups3 JOIN groups3.fullHierarchy fullHierarchy3
      WHERE user3.id = CURRENT_PRINCIPAL AND fullHierarchy3 = e.group) AND EXISTS (SELECT /* QUERY_OPTIMIZE_NOCACHE */ user FROM User user JOIN
      user.roles role JOIN role.privileges privilege WHERE privilege = e.privilege AND user.id = CURRENT_PRINCIPAL))
      )
      ))
    </access-rule>
  </persistence-unit>

  <persistence-unit name="alias">
  	<access-rule>
      GRANT ACCESS TO Contact contact WHERE contact.owner.name = 'user'
  	</access-rule>
  </persistence-unit>
  
  <persistence-unit name="client">
    <access-rule>GRANT CREATE ACCESS TO Client client</access-rule>
    <access-rule>
      GRANT ACCESS TO Client client WHERE EXISTS (
          SELECT c FROM Client c INNER JOIN c.staffing cs LEFT OUTER JOIN c.currentStatus s
          WHERE c = client
            AND cs.employee.email = CURRENT_PRINCIPAL
            AND cs.endDate IS NULL
            AND (s IS NULL OR s.name IS NULL OR s.name &lt;> 'Closed'))
    </access-rule>
  </persistence-unit>
</security>