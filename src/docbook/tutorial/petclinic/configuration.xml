<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article id="configuration">
  <title>Configuration</title>
  <para>
    Our application uses JPA as data-access-layer. We configure this in the <filename>web.xml</filename>
    (in <filename>src/main/webapp/WEB-INF</filename>) by changing the following lines
  </para>
  <programlisting>
    <![CDATA[
      <param-value>/WEB-INF/applicationContext-jdbc.xml</param-value>
      <!--
      <param-value>/WEB-INF/applicationContext-hibernate.xml</param-value>
      <param-value>/WEB-INF/applicationContext-jpa.xml</param-value>
      -->
    ]]>
  </programlisting>
  <para>into</para>
  <programlisting>
    <![CDATA[
      <!--
      <param-value>/WEB-INF/applicationContext-jdbc.xml</param-value>
      <param-value>/WEB-INF/applicationContext-hibernate.xml</param-value>
      -->
      <param-value>/WEB-INF/applicationContext-jpa.xml</param-value>
    ]]>
  </programlisting>
  <para>
    We now have to delete the packages <systemitem>org.springframework.samples.petclinic.aspects</systemitem>,
    <systemitem>org.springframework.samples.petclinic.jdbc</systemitem>,
    <systemitem>org.springframework.samples.petclinic.hibernate</systemitem>
    and <systemitem>org.springframework.samples.petclinic.toplink</systemitem>
    as we want to use OpenJPA as persistence provider and don't have the other dependencies in our pom. 
  </para>
  <para>
    We don't need any load-time-weaving so we disable AspectJ in the file <filename>applicationContext-jpa.xml</filename>
    (in the folder <filename>src/main/webapp/WEB-INF/</filename>) by commenting out the following two lines
    (that are spread over the file): 
  </para>
  <programlisting>
    <![CDATA[
    <context:load-time-weaver/>
    ]]>
  </programlisting>
  <programlisting>
    <![CDATA[
    <bean class="org.springframework.samples.petclinic.aspects.UsageLogAspect" p:historySize="300"/>
    ]]>
  </programlisting>
  <para>like this</para>
  <programlisting>
    <![CDATA[
    <!--
    <context:load-time-weaver/>
    -->
    ]]>
  </programlisting>
  <programlisting>
    <![CDATA[
    <!--
    <bean class="org.springframework.samples.petclinic.aspects.UsageLogAspect" p:historySize="300"/>
    -->
    ]]>
  </programlisting>
  <para>
    Additionally we have to configure Springs annotation support not to use aspectj by changing the following line
  </para>
  <programlisting>
    <![CDATA[
    <tx:annotation-driven mode="aspectj"/>
    ]]>
  </programlisting>
  <para>
    into
  </para>
  <programlisting>
    <![CDATA[
    <tx:annotation-driven/>
    ]]>
  </programlisting>
  <para>
    As mentioned above, we want to use OpenJPA as persistence provider.
    We enable it by changing the following lines in <filename>applicationContext-jpa.xml</filename>
    (in the folder <filename>src/main/webapp/WEB-INF/</filename>)
  </para>
  <programlisting>
    <![CDATA[
            <bean class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter"
                  p:databasePlatform="${jpa.databasePlatform}" p:showSql="${jpa.showSql}"/>
            <!--
            <bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter"
                  p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
            -->
    ]]>
  </programlisting>
  <para>into</para> 
  <programlisting>
    <![CDATA[
            <!--
            <bean class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter"
                  p:databasePlatform="${jpa.databasePlatform}" p:showSql="${jpa.showSql}"/>
            -->
            <bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter"
                  p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
    ]]>
  </programlisting>
  <para>
    The last step to do is to configure our database connection. This can be done in the file <filename>jdbc.properties</filename>
    (in the folder <filename>src/main/resources</filename>). Please change the following line
  </para>
  <programlisting>
    <![CDATA[
jdbc.url=jdbc:hsqldb:hsql://localhost:9001
    ]]>
  </programlisting>
  <para>
    into
  </para>
  <programlisting>
    <![CDATA[
jdbc.url=jdbc:hsqldb:file:petclinic
    ]]>
  </programlisting>
  <para>
    If we have done all this configuration we should be able to start an embedded jetty-server with maven running the petclinic-application:
  </para>
  <programlisting>
mvn jetty:run
  </programlisting>
  <para>
    If everything works all right, jetty started successfully and you can visit the spring-petclinic sample-application 
    <ulink url="http://localhost:8080/jpasecurity-spring-petclinic-sample">here</ulink>.
  </para>
</article>
