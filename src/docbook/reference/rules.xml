<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.1//EN" "http://www.oasis-open.org/docbook/xml/simple/1.1/sdocbook.dtd">
<article id="rules">
  <title>Providing access rules</title>
  <para>
    With JPA Security there are two predefined ways to provide access rules:
    via XML configuration or via Annotations. You may implement your own way
    of providing access rules. We will see later how this can be done.
  </para>
  <section id="rules-xml">
    <title>Access rules via XML</title>
    <para>
      One predefined way to provide access rules in JPA Security is via a file
      called <filename>security.xml</filename>, which is located in the <filename>META-INF</filename>
      directory of your application. Below is an example of the structure of such file:
    </para>
    <programlisting>
&lt;security xmlns="http://jpasecurity.sf.net/xml/ns/security"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://jpasecurity.sf.net/xml/ns/security
                              http://jpasecurity.sf.net/xml/ns/security/security_1_0.xsd"
          version="1.0"&gt;

  &lt;persistence-unit name="..."&gt;
    &lt;access-rule&gt;...&lt;/access-rule&gt;
    ...
  &lt;/persistence-unit&gt;
&lt;/security&gt;
    </programlisting>
  </section>
  <section id="rules-annotations">
    <title>Access rules via Annotations</title>
    <para>
      The other predefined way to provide access rules in JPA Security is via Annotations.
      You may annotate your entity classes with one of the following two annotations:
      <systemitem>javax.annotation.security.RolesAllowed</systemitem> and
      <systemitem>net.sf.jpasecurity.security.rules.Permit</systemitem>.
    </para>
    <para>
      Note that the semantics of the <systemitem>@RolesAllowed</systemitem> annotation slightly differs
      between the EJB Specification and JPA Security: If you annotate a class with the
      <systemitem>@RolesAllowed</systemitem> annotation this means for EJB any access to any method
      of an instance of that class will cause a <systemitem>SecurityException</systemitem>, if the
      current user is not in one of the roles allowed. JPA Security goes a step further:
      The current user will not retrieve this object from database if he is not in one of
      the roles allowed. JPA Security does not support the <systemitem>@RolesAllowed</systemitem>
      annotation at method-level.
    </para>
    <para>
      The <systemitem>@Permit</systemitem> annotation has an optional parameter <systemitem>where</systemitem>.
      With this parameter you can specify your restrictions for entities
      of the annotated class.
    </para>
  </section>
  <section>
    <title>Custom Access-Rules Provider</title>
    <para>
	  As stated before you may implement your own way of providing access rules (i.e. via JDBC).
	  You have to implement the interface <systemitem>net.sf.jpasecurity.security.rules.AccessRulesProvider</systemitem>
	  and specify the property <systemitem>net.sf.jpasecurity.security.rules.provider</systemitem>
	  in your <filename>persistence.xml</filename> with the classname of your implementation of the
	  interface <systemitem>net.sf.jpasecurity.security.rules.AccessRulesProvider</systemitem>.
      Take a look at its javadoc documentation for further reference.
    </para>
  </section>
</article>
